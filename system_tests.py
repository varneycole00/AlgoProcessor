import json
import unittest
import block_operations
import database_utils
from algosdk.v2client import algod

algod_address = "https://mainnet-algorand.api.purestake.io/ps2"
algod_token = 'oWqGS9gepoOUGq2axkfk3colf3zPybB3tlMoLik1'

headers = {
    "X-API-KEY": algod_token
}

algod_client = algod.AlgodClient(algod_token, algod_address, headers)


class TestBlockOperations(unittest.TestCase):

    def test_get_last_round(self):
        assert block_operations.get_last_round() == algod_client.status().get('last-round')

    def test_generate_block_message(self):
        to_test = block_operations.generate_block_message(20000000)
        block = algod_client.block_info(round_num=20000000, response_format='json')
        to_test = json.loads(to_test)

        # This dictionary was hand generated by analyzing the json block data for the whole 20000000th block and
        # building a dictionary as
        sample_dict = \
            {"block": str(20000000), "transactions": {
                "0": {"sender": "PKWFQU7Y47YV2XCEE7IGAHAPSSIXAIONMAVOEWXI5UOD3I5B4GNKQQQG2Q",
                      "receiver": "4QDLMVQORYVMBABY2EXGIVK53TBJWURS4PH2OC2TMOGKSZVMTOA6XHHZE4",
                      "transaction amount": 2000, "fee": 1000},
                "1": {"sender": "PKWFQU7Y47YV2XCEE7IGAHAPSSIXAIONMAVOEWXI5UOD3I5B4GNKQQQG2Q",
                      "receiver": "4QDLMVQORYVMBABY2EXGIVK53TBJWURS4PH2OC2TMOGKSZVMTOA6XHHZE4",
                      "transaction amount": 20000000, "fee": 1000},
                "2": {"sender": "TDMSMDPXQUTRH34RBKOXYGCHPSDWWXWM7KIPACYFC7CMMXQ4AVWPBPRNJQ",
                      "receiver": "VV635QXQWL4MCZCFIBVI3YZV622T5HUT3I5RQMPSUGWGJ3RHGX6ARVCGSM",
                      "transaction amount": 2000, "fee": 1000},
                "3": {"sender": "VV635QXQWL4MCZCFIBVI3YZV622T5HUT3I5RQMPSUGWGJ3RHGX6ARVCGSM",
                      "receiver": "TDMSMDPXQUTRH34RBKOXYGCHPSDWWXWM7KIPACYFC7CMMXQ4AVWPBPRNJQ",
                      "transaction amount": 4927, "fee": 1000},
                "4": {"sender": "QD6NSI23VUWBUUT5PJJV7KZ34QEWRIOJJACSYA2OR743RCQQJVLEVZ4WW4",
                      "receiver": "YPHYG4CUSWROXSELRCNHV644PBWEWXML3UVDVQEMKSUOPUKFXSFH6KVGXU",
                      "transaction amount": 3275990000, "fee": 1084}
            }}

        assert to_test == sample_dict
        assert to_test["block"] == sample_dict["block"]


class TestDatabaseUtils(unittest.TestCase):

    def test_create_account(self):
        database_utils.create_account("CREATE")
        database_utils.remove_account("CREATE")

    def test_get_account_balance(self):
        bal = database_utils.get_account_balance("GET BALANCE")
        assert bal == 0
        database_utils.remove_account("GET BALANCE")

    # Reminder: This function really only exists for text purposes, there's no reason under the constraints to need this
    def test_remove_account(self):
        database_utils.create_account("TO REMOVE")
        database_utils.remove_account("TO REMOVE")
        exists = database_utils.account_exists("TO REMOVE")
        assert exists is False

    def test_get_account_balance_no_account(self):
        bal = database_utils.get_account_balance("ABCDEFG")
        assert bal == 0
        database_utils.remove_account("ABCDEFG")

    def test_update_balance(self):
        cursor = database_utils.get_cursor()
        database_utils.create_account("TEST UPDATE")
        database_utils.update_balance("TEST UPDATE", 2000000, cursor)
        bal = database_utils.get_account_balance("TEST UPDATE")
        assert bal == 2000000
        database_utils.remove_account("TEST UPDATE")
        cursor.close()

    def test_add_to_balance(self):
        cursor = database_utils.get_cursor()
        start_bal = database_utils.get_account_balance("TEST ADD")
        database_utils.add_to_balance("TEST ADD", 200, cursor)
        end_bal = database_utils.get_account_balance("TEST ADD")
        assert start_bal == end_bal - 200
        database_utils.remove_account("TEST ADD")
        cursor.close()

    def test_remove_from_balance(self):
        cursor = database_utils.get_cursor()
        start_bal = database_utils.get_account_balance("TEST REMOVE")
        database_utils.remove_from_balance("TEST REMOVE", 200, cursor)
        end_bal = database_utils.get_account_balance("TEST REMOVE")
        assert start_bal == end_bal + 200
        database_utils.remove_account("TEST REMOVE")
        cursor.close()

    def test_handle_transaction(self):
        database_utils.get_account_balance("TEST HANDLE SND")
        database_utils.get_account_balance("TEST HANDLE RCV")
        database_utils.handle_transaction("TEST HANDLE SND", "TEST HANDLE RCV", 2000000, 1000)
        assert database_utils.get_account_balance("TEST HANDLE SND") == -2001000
        assert database_utils.get_account_balance("TEST HANDLE RCV") == 2000000


if __name__ == '__main__':
    unittest.main()
